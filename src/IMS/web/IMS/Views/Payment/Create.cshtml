@model IMS.BusinessModel.ViewModel.PaymentViewModel
@{
    ViewData["Title"] = "Make Payment";
}

<div class="container-fluid">
    <div class="row d-flex justify-content-center">
        <div class="col-8">
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">@ViewData["Title"]</h3>
                </div>
                @using (Html.BeginForm("Create", "Payment", FormMethod.Post, htmlAttributes: new { @id = "paymentForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="card-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            <label>Total Amount</label>
                            @Html.TextBoxFor(m => m.TotalAmount, new { @class = "form-control", @placeholder = "Total Amount", @type = "text", @readonly = true })
                            @Html.ValidationMessageFor(m => m.TotalAmount, null, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Total Amount to be paid</label>
                            @Html.TextBoxFor(m => m.DueAmount, new { @id = "dueAmount", @class = "form-control", @placeholder = "Total Due Amount", @type = "text", @readonly = true })
                            @Html.ValidationMessageFor(m => m.DueAmount, null, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Pay Now</label>
                            @Html.TextBoxFor(m => m.Amount, new { @id = "payAmount", @class = "form-control", @placeholder = "Amount", @type = "text" })
                            @Html.ValidationMessageFor(m => m.Amount, null, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label>Select Payment Method</label>
                            @Html.DropDownListFor(m => m.PaymentMethod, (IEnumerable<SelectListItem>)ViewBag.PaymentMethodList, "Select Method", new { @id = "paymentMethodListBox", @class = "form-control" })

                        </div>
                        <div class="form-group" id="bankListBox">
                            <label>Select Bank</label>
                            @Html.DropDownListFor(m => m.BankId, (IEnumerable<SelectListItem>)ViewBag.BankList, "Select Bank", new { @id = "bankListBox", @class = "form-control" })

                        </div>
                        <div class="form-group" id="transactionField">
                            <label> @Html.LabelFor(m => m.TransactionId)</label>
                            @Html.TextBoxFor(m => m.TransactionId, new { @id = "transactionId", @class = "form-control", @placeholder = "Transaction Id", @type = "text" })

                        </div>
                        @Html.HiddenFor(model => model.PaymentId)
                    </div>
                    <div class="card-footer">
                        <input onclick="validate()" value="Submit" class="btn btn-primary btn-lg btn-block" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('#bankListBox').hide();
            $('#transactionField').hide();
            $("#paymentMethodListBox").change(function () {
                let v = $('#paymentMethodListBox').val();
                //10 means payment method cash
                //20 means payment method Bank
                if (v == '20') {                    
                    $('#bankListBox').show();
                    $('#transactionField').show();
                }
                else {
                    $('#bankListBox').hide();
                    $('#transactionField').hide();
                }
            });            
        });

        function validate() {
            console.log("Start");            
            let due = parseFloat($("#dueAmount").val());
            let pay = parseFloat($("#payAmount").val());
            let payType = $("#paymentMethodListBox").val();
            let bank = parseFloat($("#bankListBox").val());
            let transactionIdLength = $("#transactionId").val().length;
            if (pay > 0 && pay <= due) {
                $('#payAmount').css('border-color', '');
                //10 means payment method cash
                //20 means payment method Bank
                if (payType == '10' || (payType == '20' && bank != '' && transactionIdLength > 4)) {
                    $('#transactionId').css('border-color', '');
                    $('#bankListBox').css('border', '');
                    $("#paymentForm").submit();
                }
                else {
                    $('#transactionId').css('border-color', 'red');
                    $('#bankListBox').css('border', '1px solid red');
                }
            }
            else {
                $('#payAmount').css('border-color', 'red');
            }
        };
    </script>
}
